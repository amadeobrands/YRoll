{
  "language": "Solidity",
  "sources": {
    "contracts/external/AaveAdaptor.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interface/Aave.sol\";\nimport \"./interface/AToken.sol\";\n\n// https://docs.aave.com/developers/deployed-contracts/deployed-contract-instances\ncontract AaveAdaptor is Ownable {\n    LendingPool aave;\n\n    mapping(address => address) public aTokenPair;\n\n    event AssetDeposited(\n        address _token,\n        address _who,\n        uint256 _amount,\n        uint256 _timestamp\n    );\n\n    event AssetWithdrawn(\n        address _token,\n        address _who,\n        uint256 _amount,\n        uint256 _timestamp\n    );\n\n    function setAave(address _aave) external onlyOwner {\n        aave = LendingPool(_aave);\n    }\n\n    function deposit(address _token, uint256 _amount) external {\n        emit AssetDeposited(_token, msg.sender, _amount, block.timestamp);\n\n        IERC20(_token).approve(address(aave), _amount);\n\n        aave.deposit(_token, _amount, 0);\n\n        AToken aToken = AToken(aTokenPair[_token]);\n\n        aToken.transfer(msg.sender, aToken.balanceOf(address(this)));\n    }\n\n    function withdraw(address _token, uint256 _amount) external {\n        AToken aToken = AToken(aTokenPair[_token]);\n        emit AssetWithdrawn(_token, msg.sender, _amount, block.timestamp);\n\n        aToken.redeem(_amount);\n\n        IERC20(_token).transfer(\n            msg.sender,\n            IERC20(_token).balanceOf(address(this))\n        );\n    }\n\n    function redeemTokens(address _token, uint256 _amount) external {}\n\n    function setATokenPair(address _token, address _aToken) external onlyOwner {\n        aTokenPair[_token] = _aToken;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/external/interface/Aave.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @title LendingPool contract\n * @notice Implements the actions of the LendingPool, and exposes accessory methods to fetch the users and reserve data\n * @author Aave\n **/\ninterface LendingPool {\n    /**\n     * @dev deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens)\n     * is minted.\n     * @param _reserve the address of the reserve\n     * @param _amount the amount to be deposited\n     * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.\n     **/\n    function deposit(\n        address _reserve,\n        uint256 _amount,\n        uint16 _referralCode\n    ) external payable;\n}\n"
    },
    "contracts/external/interface/AToken.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface AToken {\n    function redeem(uint256 _amount) external;\n\n    function balanceOf(address _user) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/streams/StreamManager.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"../Treasury.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Stream.sol\";\n\ncontract StreamManager is Ownable {\n    Treasury treasury;\n    Stream stream;\n\n    function setTreasury(address _treasury) public onlyOwner {\n        treasury = Treasury(_treasury);\n    }\n\n    function setStream(address _stream) public onlyOwner {\n        stream = Stream(_stream);\n    }\n\n    function balance(address _token) public view returns (uint256) {\n        return treasury.viewAvailableBalance(msg.sender, _token);\n    }\n\n    function startStream(\n        address _token,\n        address _recipient,\n        uint256 _amount,\n        uint256 _start,\n        uint256 _stop\n    ) public {\n        uint256 balance = treasury.viewAvailableBalance(_token, msg.sender);\n\n        require(balance >= _amount, \"Not enough balance to start stream\");\n\n        treasury.allocateFunds(_token, msg.sender, _amount);\n\n        stream.createStream(\n            msg.sender,\n            _recipient,\n            _amount,\n            _token,\n            _start,\n            _stop\n        );\n    }\n\n    function withdrawFromStream(\n        uint256 _streamId,\n        uint256 _amount,\n        address _recipient\n    ) public {\n        (\n            address sender,\n            address streamRecipient,\n            ,\n            address tokenAddress,\n            ,\n            ,\n            ,\n            ,\n\n        ) = stream.getStream(_streamId);\n\n        require(msg.sender == streamRecipient, \"Not your stream\");\n\n        stream.withdraw(_streamId, _amount, msg.sender);\n\n        treasury.withdraw(tokenAddress, sender, _recipient, _amount);\n    }\n\n    // @dev allows withdrawal from the stream, if there is not sufficient balance accrued, the Stream contract\n    // will automatically revert\n    function claimFromStream(uint256 _streamId, uint256 _amount) public {\n        (\n            address sender,\n            address recipient,\n            ,\n            address tokenAddress,\n            ,\n            ,\n            ,\n            ,\n\n        ) = stream.getStream(_streamId);\n\n        require(recipient == msg.sender, \"Only Stream Recipient\");\n\n        stream.withdraw(_streamId, _amount, msg.sender);\n\n        treasury.transferFunds(tokenAddress, sender, msg.sender, _amount);\n    }\n}\n"
    },
    "contracts/Treasury.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./external/ExchangeAdaptor.sol\";\n\n// Notes for improvement - allocating funds does not relate to an address nor to a stream, would be beneficial\n// to know where the funds are allocated to. This can be handled by the stream manager but needs strong coordination\n// between the 2 services\ncontract Treasury is AccessControl {\n    using SafeMath for uint256;\n\n    bytes32 public constant TREASURY_ADMIN = keccak256(\"TREASURY_ADMIN\");\n    bytes32 public constant TREASURY_OPERATOR = keccak256(\"TREASURY_OPERATOR\");\n\n    ExchangeAdaptor exchangeAdaptor;\n\n    address public exxxchange;\n\n    function getExchange() public view returns (address) {\n        return exxxchange;\n    }\n\n    // @dev mapping from User address to ERC20 address then to Balances\n    mapping(address => mapping(address => Balance)) userBalances;\n\n    // @dev clients deposited balance along with allocated balance\n    struct Balance {\n        uint256 deposited;\n        uint256 allocated;\n    }\n\n    // @dev set contract creator as the admin & initiate the Treasury Operator role\n    constructor() public {\n        _setupRole(TREASURY_ADMIN, msg.sender);\n        _setRoleAdmin(TREASURY_OPERATOR, TREASURY_ADMIN);\n    }\n\n    // @dev allows changing of the exchange adaptor - can be expanded past 1inch in future if needed\n    function setExchangeAdaptor(address _exchangeAdaptor) public onlyTreasuryAdmin {\n        exchangeAdaptor = ExchangeAdaptor(_exchangeAdaptor);\n    }\n\n    // @dev set address as treasury operator, likely to be a stream manager but perhaps different use cases later on\n    function setTreasuryOperator(address _who) public onlyTreasuryAdmin {\n        grantRole(TREASURY_OPERATOR, _who);\n    }\n\n    // @dev allow deposits of erc20 tokens\n    function deposit(address _token, uint256 _amount) public {\n        depositFunds(_token, msg.sender, _amount);\n\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n    }\n\n    // @dev allows withdrawal from the treasury, can only be called by the treasury operator\n    function withdraw(\n        address _token,\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    ) public onlyTreasuryOperator hasBalanceToWithdraw(_token, _sender, _amount) {\n        withdrawFunds(_token, _sender, _amount);\n\n        IERC20(_token).transfer(_recipient, _amount);\n    }\n\n    // @dev performs a swap allowing users to withdraw a different token to the deposited one\n    function exchangeFunds(\n        address _tokenSell,\n        address _tokenBuy,\n        uint256 _amountToSell,\n        uint256 _minAmountToBuy,\n        uint256[] memory _distribution,\n        address _sender,\n        address _recipient\n    ) public onlyTreasuryOperator hasBalanceToWithdraw(_tokenSell, _sender, _amountToSell) {\n        withdrawFunds(_tokenSell, _sender, _amountToSell);\n\n        IERC20(_tokenSell).transfer(address(exchangeAdaptor), _amountToSell);\n\n        exchangeAdaptor.exchange(_tokenSell, _tokenBuy, _amountToSell, _minAmountToBuy, _distribution, _recipient);\n    }\n\n    // @dev funds are able to be reallocated to different accounts (I.E when paying someone or during the lifetime of a\n    // stream, this means they do not have to be withdrawn out of the platform and can later on be streamed out again\n    function transferFunds(\n        address _token,\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    ) public onlyTreasuryOperator hasSufficientAllocatedFunds(_token, _sender, _amount) {\n        withdrawFunds(_token, _sender, _amount);\n        depositFunds(_token, _recipient, _amount);\n        deallocateFunds(_token, _sender, _amount);\n    }\n\n    // @dev once a stream is started, funds are allocated and locked from being withdrawn\n    // by the account which started the stream\n    // todo check they have enough funds to allocate\n    function allocateFunds(\n        address _token,\n        address _who,\n        uint256 _amount\n    ) public onlyTreasuryOperator {\n        userBalances[_who][_token].allocated = userBalances[_who][_token].allocated.add(_amount);\n    }\n\n    // @dev called when funds are withdrawn, decrease the deposited balance\n    function withdrawFunds(\n        address _token,\n        address _who,\n        uint256 _amount\n    ) internal {\n        userBalances[_who][_token].deposited = userBalances[_who][_token].deposited.sub(_amount);\n    }\n\n    // @dev called when funds are deposited, increase the deposited balance\n    function depositFunds(\n        address _token,\n        address _who,\n        uint256 _amount\n    ) internal {\n        userBalances[_who][_token].deposited = userBalances[_who][_token].deposited.add(_amount);\n    }\n\n    // @dev once a stream is started, funds are allocated and locked from being withdrawn\n    // by the account which started the stream\n    function deallocateFunds(\n        address _token,\n        address _who,\n        uint256 _amount\n    ) internal onlyTreasuryOperator {\n        userBalances[_who][_token].allocated = userBalances[_who][_token].allocated.sub(_amount);\n    }\n\n    // @dev See the total available tokens for client\n    function viewUserTokenBalance(address _token, address _who)\n        public\n        view\n        returns (uint256 deposited, uint256 allocated)\n    {\n        return (userBalances[_who][_token].deposited, userBalances[_who][_token].allocated);\n    }\n\n    // @dev subtract the allocated balance from the deposit to see the available funds\n    function viewAvailableBalance(address _token, address _who) public view returns (uint256) {\n        return userBalances[_who][_token].deposited.sub(userBalances[_who][_token].allocated);\n    }\n\n    // @dev check if the address has the role Treasury Admin\n    modifier onlyTreasuryAdmin() {\n        require(hasRole(TREASURY_ADMIN, msg.sender), \"Not Treasury Admin\");\n        _;\n    }\n\n    // @dev check if the address has the role Treasury Operator\n    modifier onlyTreasuryOperator() {\n        require(hasRole(TREASURY_OPERATOR, msg.sender), \"Not Treasury Operator\");\n        _;\n    }\n\n    // @dev ensure there is enough balance to perform withdrawal\n    modifier hasBalanceToWithdraw(\n        address _token,\n        address _who,\n        uint256 _amount\n    ) {\n        require(viewAvailableBalance(_token, _who) >= _amount, \"Insufficient balance to withdraw\");\n        _;\n    }\n\n    // @dev ensure that funds have been allocated\n    modifier hasSufficientAllocatedFunds(\n        address _token,\n        address _from,\n        uint256 _amount\n    ) {\n        require(userBalances[_from][_token].allocated >= _amount, \"Insufficient allocated balance\");\n        _;\n    }\n}\n"
    },
    "contracts/streams/Stream.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./lib/Types.sol\";\nimport \"./interface/IStream.sol\";\n\ncontract Stream is IStream, AccessControl {\n    using SafeMath for uint256;\n\n    bytes32 public constant STREAM_ADMIN = keccak256(\"STREAM_ADMIN\");\n    bytes32 public constant STREAM_OPERATOR = keccak256(\"STREAM_OPERATOR\");\n\n    mapping(uint256 => Types.Stream) internal streams;\n    uint256 public nextStreamId;\n\n    event StreamCreated(\n        uint256 _streamId,\n        address _token,\n        address _sender,\n        address _recipient,\n        uint256 _deposit,\n        uint256 _startTime,\n        uint256 _stopTime\n    );\n\n    event StreamWithdrawnFrom(\n        uint256 _streamId,\n        address _token,\n        address _recipient,\n        uint256 _amount,\n        uint256 _amountRemaining,\n        uint256 _timeOfWithdrawal\n    );\n\n    event StreamClosed(\n        uint256 _streamId,\n        address _recipient,\n        uint256 _amount,\n        uint256 _amountRemaining,\n        uint256 _timeOfWithdrawal\n    );\n\n    // @dev construct Stream and set Admin to creator\n    constructor() public {\n        _setupRole(STREAM_ADMIN, msg.sender);\n        _setRoleAdmin(STREAM_OPERATOR, STREAM_ADMIN);\n        nextStreamId = 1;\n    }\n\n    // @dev set address as treasury operator, likely to be a stream manager but perhaps different use cases later on\n    function setStreamOperator(address _who) public onlyStreamAdmin {\n        grantRole(STREAM_OPERATOR, _who);\n    }\n\n    function createStream(\n        address _sender,\n        address _recipient,\n        uint256 _deposit,\n        address _token,\n        uint256 _startTime,\n        uint256 _stopTime\n    ) public virtual onlyStreamOperator _baseStreamRequirements(_recipient, _deposit, _startTime) returns (uint256) {\n        require(_isNonZeroLengthStream(_startTime, _stopTime), \"Stream must last a least a second\");\n\n        uint256 duration = _stopTime.sub(_startTime);\n        uint256 ratePerSecond = _calculateRatePerSecond(_deposit, duration);\n        require(ratePerSecond > 0, \"Rate per second must be above 0\");\n\n        uint256 streamId = nextStreamId;\n        nextStreamId = nextStreamId.add(1);\n\n        streams[streamId] = Types.Stream({\n            remainingBalance: _deposit,\n            deposit: _deposit,\n            ratePerSecond: ratePerSecond,\n            recipient: _recipient,\n            sender: _sender,\n            startTime: _startTime,\n            stopTime: _stopTime,\n            tokenAddress: _token,\n            isEntity: true,\n            streamType: Types.StreamType.FixedTimeStream\n        });\n\n        emit StreamCreated(streamId, _token, _sender, _recipient, _deposit, _startTime, _stopTime);\n\n        return streamId;\n    }\n\n    function withdraw(\n        uint256 _streamId,\n        uint256 _amount,\n        address _recipient\n    ) public onlyStreamOperator _canWithdrawFunds(_streamId, _amount, _recipient) {\n        streams[_streamId].remainingBalance = streams[_streamId].remainingBalance.sub(_amount);\n\n        emit StreamWithdrawnFrom(\n            _streamId,\n            streams[_streamId].tokenAddress,\n            _recipient,\n            _amount,\n            streams[_streamId].remainingBalance,\n            block.timestamp\n        );\n    }\n\n    function getStream(uint256 _streamId)\n        external\n        view\n        _streamExists(_streamId)\n        returns (\n            address sender,\n            address recipient,\n            uint256 deposit,\n            address tokenAddress,\n            uint256 startTime,\n            uint256 stopTime,\n            uint256 remainingBalance,\n            uint256 ratePerSecond,\n            uint256 balanceAccrued\n        )\n    {\n        sender = streams[_streamId].sender;\n        recipient = streams[_streamId].recipient;\n        deposit = streams[_streamId].deposit;\n        tokenAddress = streams[_streamId].tokenAddress;\n        startTime = streams[_streamId].startTime;\n        stopTime = streams[_streamId].stopTime;\n        remainingBalance = streams[_streamId].remainingBalance;\n        ratePerSecond = streams[_streamId].ratePerSecond;\n        balanceAccrued = _calculateBalanceAccrued(_streamId);\n    }\n\n    function getStreamTokenAddress(uint256 _streamId) public view returns (address token) {\n        return streams[_streamId].tokenAddress;\n    }\n\n    function _calculateBalanceAccrued(uint256 _streamId) internal view returns (uint256 balanceAccrued) {\n        return _calculateDurationElapsed(_streamId).mul(streams[_streamId].ratePerSecond);\n    }\n\n    function _calculateBalanceRemaining(uint256 _streamId) internal view returns (uint256 BalanceRemaining) {\n        return streams[_streamId].deposit.sub(_calculateBalanceAccrued(_streamId));\n    }\n\n    function _isStreamRunning(uint256 _streamId) internal view returns (bool) {\n        return _hasStreamStarted(_streamId) && !_hasStreamFinished(_streamId);\n    }\n\n    function _hasStreamStarted(uint256 _streamId) internal virtual view returns (bool) {\n        return block.timestamp >= streams[_streamId].startTime;\n    }\n\n    function _hasStreamFinished(uint256 _streamId) internal virtual view returns (bool) {\n        return block.timestamp >= streams[_streamId].stopTime;\n    }\n\n    function _calculateRatePerSecond(uint256 _deposit, uint256 _duration) internal virtual view returns (uint256) {\n        return _deposit.div(_duration);\n    }\n\n    function _isNonZeroLengthStream(uint256 _startTime, uint256 _stopTime) internal view returns (bool) {\n        return _stopTime.sub(_startTime) > 0;\n    }\n\n    function _calculateDurationElapsed(uint256 _streamId) internal virtual view returns (uint256 durationElapsed) {\n        if (_isStreamRunning(_streamId)) {\n            return block.timestamp.sub(streams[_streamId].startTime);\n        } else if (_hasStreamFinished(_streamId)) {\n            return streams[_streamId].stopTime.sub(streams[_streamId].startTime);\n        }\n\n        return 0;\n    }\n\n    function _calculateDurationRemaining(uint256 _streamId) internal virtual view returns (uint256 durationElapsed) {\n        if (_calculateDurationElapsed(_streamId) > 0) {\n            return streams[_streamId].stopTime.sub(block.timestamp);\n        }\n        return 0;\n    }\n\n    modifier _streamExists(uint256 _streamId) {\n        require(streams[_streamId].isEntity, \"Stream does not exist\");\n        _;\n    }\n\n    modifier _canWithdrawFunds(\n        uint256 _streamId,\n        uint256 _amount,\n        address _who\n    ) virtual {\n        require(streams[_streamId].recipient == _who, \"Not the stream owner\");\n        require(streams[_streamId].remainingBalance >= _amount, \"Not enough balance to withdraw\");\n        _;\n    }\n\n    // @dev check if the address has the role Treasury Admin\n    modifier onlyStreamAdmin() {\n        require(hasRole(STREAM_ADMIN, msg.sender), \"Not Stream Admin\");\n        _;\n    }\n\n    // @dev check if the address has the role Treasury Operator\n    modifier onlyStreamOperator() {\n        require(hasRole(STREAM_OPERATOR, msg.sender), \"Not Stream Operator\");\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../utils/EnumerableSet.sol\";\nimport \"../utils/Address.sol\";\nimport \"../GSN/Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/external/ExchangeAdaptor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./interface/IOneSplit.sol\";\n\ncontract ExchangeAdaptor is Ownable {\n    using SafeERC20 for IERC20;\n\n    IOneSplit oneInchExchange;\n\n    function setOneInch(address _oneInchAddress) public onlyOwner {\n        oneInchExchange = IOneSplit(_oneInchAddress);\n    }\n\n    function exchange(\n        address _tokenSell,\n        address _tokenBuy,\n        uint256 _amountToSell,\n        uint256 _minAmountToBuy,\n        uint256[] memory _distribution,\n        address _recipient\n    ) public {\n        SafeERC20.safeIncreaseAllowance(IERC20(_tokenSell), address(oneInchExchange), _amountToSell);\n\n        uint256 amountPurchased = oneInchExchange.swap(\n            IERC20(_tokenSell),\n            IERC20(_tokenBuy),\n            _amountToSell,\n            _minAmountToBuy,\n            _distribution,\n            0\n        );\n\n        IERC20(_tokenBuy).transfer(_recipient, amountPurchased);\n    }\n\n    function getOneInchAddress() public view returns (address) {\n        return address(oneInchExchange);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/external/interface/IOneSplit.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IOneSplit {\n    function getExpectedReturn(\n        IERC20 fromToken,\n        IERC20 destToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 flags // See constants in IOneSplit.sol\n    )\n        external\n        virtual\n        view\n        returns (uint256 returnAmount, uint256[] memory distribution);\n\n    function getExpectedReturnWithGas(\n        IERC20 fromToken,\n        IERC20 destToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 flags, // See constants in IOneSplit.sol\n        uint256 destTokenEthPriceTimesGasPrice\n    )\n        external\n        virtual\n        view\n        returns (\n            uint256 returnAmount,\n            uint256 estimateGasAmount,\n            uint256[] memory distribution\n        );\n\n    function swap(\n        IERC20 fromToken,\n        IERC20 destToken,\n        uint256 amount,\n        uint256 minReturn,\n        uint256[] calldata distribution,\n        uint256 flags\n    ) external virtual payable returns (uint256 returnAmount);\n}\n"
    },
    "contracts/streams/lib/Types.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.0;\n\nlibrary Types {\n    enum StreamType {FixedTimeStream, PausableStream, SplitStream}\n\n    struct Stream {\n        uint256 startTime;\n        uint256 stopTime;\n        uint256 deposit;\n        uint256 ratePerSecond;\n        uint256 remainingBalance;\n        address sender;\n        address tokenAddress;\n        bool isEntity;\n        address recipient;\n        StreamType streamType;\n    }\n\n    struct PausableStream {\n        uint256 duration;\n        uint256 durationElapsed;\n        bool isActive;\n    }\n\n    struct MultipleRecipientStream {\n        Stream streams;\n    }\n}\n"
    },
    "contracts/streams/interface/IStream.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.0;\n\ninterface IStream {\n    modifier _baseStreamRequirements(\n        address _recipient,\n        uint256 _deposit,\n        uint256 _startTime\n    ) {\n        require(_recipient != address(0x00), \"Cannot start a stream to the 0x address\");\n        require(_recipient != address(this), \"Cannot start a stream to the stream contract\");\n        require(_recipient != msg.sender, \"Cannot start a stream to yourself\");\n        require(_deposit > 0, \"Cannot start a stream with 0 balance\");\n        require(_startTime >= block.timestamp, \"Cannot start a stream in the past\");\n        _;\n    }\n}\n"
    },
    "contracts/streams/PausableStream.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./lib/Types.sol\";\nimport \"./Stream.sol\";\nimport \"./interface/IPausableStream.sol\";\n\ncontract PausableStream is IPausableStream, Stream {\n    using SafeMath for uint256;\n\n    mapping(uint256 => Types.PausableStream) private pausableStreams;\n\n    // todo toggle if stream starts active or not\n    // todo add test case for multiple streams being created\n    function createStream(\n        address _sender,\n        address _recipient,\n        uint256 _deposit,\n        address _tokenAddress,\n        uint256 _duration,\n        uint256 _startTime\n    )\n        public\n        override\n        _baseStreamRequirements(_recipient, _deposit, _startTime)\n        returns (uint256 _streamId)\n    {\n        uint256 streamId = nextStreamId;\n        nextStreamId = nextStreamId.add(1);\n\n        uint256 ratePerSecond = _calculateRatePerSecond(_deposit, _duration);\n\n        if (ratePerSecond == 0) {\n            revert(\"Rate per second is less than 1\");\n        }\n\n        uint256 stopTime = _startTime.add(_duration);\n\n        streams[streamId] = Types.Stream({\n            remainingBalance: _deposit,\n            deposit: _deposit,\n            ratePerSecond: ratePerSecond,\n            recipient: _recipient,\n            sender: _sender,\n            startTime: _startTime,\n            stopTime: _startTime.add(_duration),\n            tokenAddress: _tokenAddress,\n            isEntity: true,\n            streamType: Types.StreamType.PausableStream\n        });\n\n        emit PausableStreamCreated(\n            streamId,\n            _startTime,\n            _deposit,\n            _duration,\n            ratePerSecond,\n            true\n        );\n\n        pausableStreams[streamId] = Types.PausableStream({\n            duration: _duration,\n            durationElapsed: 0,\n            isActive: true\n        });\n\n        return streamId;\n    }\n\n    function pauseStream(uint256 _streamId) public _streamIsActive(_streamId) {\n        Types.Stream memory stream = streams[_streamId];\n        Types.PausableStream memory pausableStream = pausableStreams[_streamId];\n\n        if (_hasStreamFinished(_streamId)) {\n            revert(\"Stream has finished\");\n        }\n\n        pausableStreams[_streamId].durationElapsed = _calculateDurationElapsed(\n            _streamId\n        );\n\n        // Reset start and stop points\n        streams[_streamId].startTime = 0;\n        streams[_streamId].stopTime = 0;\n\n        // Pause the stream\n        pausableStreams[_streamId].isActive = false;\n    }\n\n    function startStream(uint256 _streamId) public _streamIsPaused(_streamId) {\n        if (\n            _calculateDurationElapsed(_streamId) ==\n            pausableStreams[_streamId].duration\n        ) {\n            revert(\"Stream has finished\");\n        }\n\n        uint256 durationRemaining = pausableStreams[_streamId].duration.sub(\n            pausableStreams[_streamId].durationElapsed\n        );\n\n        // Initiate start and end points\n        streams[_streamId].startTime = block.timestamp;\n        streams[_streamId].stopTime = block.timestamp.add(durationRemaining);\n\n        // Activate the stream\n        pausableStreams[_streamId].isActive = true;\n    }\n\n    function getPausableStream(uint256 _streamId)\n        external\n        view\n        returns (\n            uint256 duration,\n            uint256 durationElapsed,\n            uint256 durationRemaining,\n            bool isRunning\n        )\n    {\n        return (\n            pausableStreams[_streamId].duration,\n            _calculateDurationElapsed(_streamId),\n            _calculateDurationRemaining(_streamId),\n            _isStreamRunning(_streamId)\n        );\n    }\n\n    modifier _streamIsActive(uint256 _streamId) {\n        require(_isStreamActive(_streamId), \"Stream is not running\");\n        _;\n    }\n\n    modifier _streamIsPaused(uint256 _streamId) {\n        require(false == _isStreamActive(_streamId), \"Stream is running\");\n        _;\n    }\n\n    modifier _canWithdrawFunds(\n        uint256 _streamId,\n        uint256 _amount,\n        address _who\n    ) override {\n        require(streams[_streamId].recipient == _who, \"Not the stream owner\");\n        require(\n            _calculateBalanceAccrued(_streamId) >= _amount,\n            \"Trying to withdraw more than balance accrued\"\n        );\n        _;\n    }\n\n    function _calculateDurationElapsed(uint256 _streamId)\n        internal\n        override\n        view\n        returns (uint256 durationElapsed)\n    {\n        if (_isStreamRunning(_streamId)) {\n            uint256 runTime = block.timestamp.sub(streams[_streamId].startTime);\n            return runTime.add(pausableStreams[_streamId].durationElapsed);\n        } else if (_hasStreamFinished(_streamId)) {\n            return pausableStreams[_streamId].duration;\n        }\n\n        return pausableStreams[_streamId].durationElapsed;\n    }\n\n    function _calculateDurationRemaining(uint256 _streamId)\n        internal\n        override\n        view\n        returns (uint256 durationElapsed)\n    {\n        return\n            pausableStreams[_streamId].duration.sub(\n                _calculateDurationElapsed(_streamId)\n            );\n    }\n\n    function _isStreamActive(uint256 _streamId) internal view returns (bool) {\n        return pausableStreams[_streamId].isActive;\n    }\n\n    function _hasStreamStarted(uint256 _streamId)\n        internal\n        override\n        view\n        returns (bool)\n    {\n        return\n            _isStreamActive(_streamId) &&\n            block.timestamp >= streams[_streamId].startTime;\n    }\n\n    function _hasStreamFinished(uint256 _streamId)\n        internal\n        override\n        view\n        returns (bool)\n    {\n        return\n            _isStreamActive(_streamId) &&\n            block.timestamp >= streams[_streamId].stopTime;\n    }\n}\n"
    },
    "contracts/streams/interface/IPausableStream.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.0;\n\ninterface IPausableStream {\n    event PausableStreamCreated(\n        uint256 id,\n        uint256 startTime,\n        uint256 deposit,\n        uint256 duration,\n        uint256 ratePerSecond,\n        bool isActive\n    );\n\n    //    function createStream(\n    //        address _recipient,\n    //        uint256 _deposit,\n    //        address _tokenAddress,\n    //        uint256 _duration,\n    //        uint256 _startTime\n    //    ) external returns (uint256 _streamId);\n    //\n    //    function withdrawFunds(\n    //        uint256 _streamId,\n    //        uint256 _amount,\n    //        address _who\n    //    ) external;\n}\n"
    },
    "contracts/streams/MultipleRecipientStream.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./lib/Types.sol\";\nimport \"./Stream.sol\";\n\ncontract MultipleRecipientStream {\n    using SafeMath for uint256;\n\n    mapping(uint256 => mapping(address => uint256)) internal streams;\n\n    Stream internal streamContract;\n    uint256 public nextStreamId;\n\n    constructor() public {\n        nextStreamId = 1;\n        streamContract = new Stream();\n    }\n\n    function createStream(\n        address _sender,\n        address[] memory _recipients,\n        uint256 _deposit,\n        address _tokenAddress,\n        uint256 _startTime,\n        uint256 _stopTime\n    ) public returns (uint256) {\n        uint256 currentStreamId = nextStreamId;\n        nextStreamId = nextStreamId.add(1);\n\n        uint256 depositShare = _deposit.div(_recipients.length);\n\n        for (uint256 i = 0; i < _recipients.length; i++) {\n            uint256 streamId = streamContract.createStream(\n                _sender,\n                _recipients[i],\n                depositShare,\n                _tokenAddress,\n                _startTime,\n                _stopTime\n            );\n\n            streams[currentStreamId][_recipients[i]] = streamId;\n        }\n\n        return currentStreamId;\n    }\n\n    function getStream(uint256 _streamId, address _address)\n        public\n        view\n        returns (\n            address sender,\n            address recipient,\n            uint256 deposit,\n            address tokenAddress,\n            uint256 startTime,\n            uint256 stopTime,\n            uint256 remainingBalance,\n            uint256 ratePerSecond,\n            uint256 balanceAccrued\n        )\n    {\n        return streamContract.getStream(streams[_streamId][_address]);\n    }\n\n    function getStreamId(uint256 _streamId, address _address) public view returns (uint256 streamId) {\n        return streams[_streamId][_address];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/FundManager.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"./Treasury.sol\";\n\ncontract FundManager is Ownable {\n    Treasury treasury;\n\n    function setTreasury(address _treasury) public onlyOwner {\n        treasury = Treasury(_treasury);\n    }\n\n    function withdrawTokensToAccount(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) public {\n        treasury.withdraw(_token, msg.sender, _to, _amount);\n    }\n\n    function swapTokensAndWithdrawToAccount(\n        address _tokenSell,\n        address _tokenBuy,\n        uint256 _amountToSell,\n        uint256 _minAmountToBuy,\n        uint256[] memory _distribution,\n        address _to\n    ) public {\n        treasury.exchangeFunds(\n            _tokenSell,\n            _tokenBuy,\n            _amountToSell,\n            _minAmountToBuy,\n            _distribution,\n            msg.sender,\n            _to\n        );\n    }\n}\n"
    },
    "contracts/mock/Erc20Mock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20 is ERC20 {\n    constructor(string memory name, string memory symbol)\n        public\n        ERC20(name, symbol)\n    {}\n\n    function mint(address to, uint256 amount) public returns (bool) {\n        _mint(to, amount);\n        return true;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}